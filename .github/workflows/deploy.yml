name: Deploy to AWS

on:
  push:
    branches:
      - main
      - SCRUM-51

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Get instance IP and ID
        id: get-instance
        run: |
          INSTANCE_IP=$(aws cloudformation describe-stacks \
            --stack-name AquaChargeStack-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
            --output text)
          INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name AquaChargeStack-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`InstanceId`].OutputValue' \
            --output text)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for SSM agent to be ready
        run: |
          echo "Waiting for SSM agent..."
          for i in {1..30}; do
            STATUS=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=${{ steps.get-instance.outputs.INSTANCE_ID }}" \
              --query 'InstanceInformationList[0].PingStatus' \
              --output text 2>/dev/null || echo "NotFound")
            
            if [ "$STATUS" = "Online" ]; then
              echo "✅ SSM agent is online"
              break
            fi
            
            echo "Attempt $i/30: Status=$STATUS, waiting..."
            sleep 10
          done

          if [ "$STATUS" != "Online" ]; then
            echo "❌ SSM agent did not come online"
            exit 1
          fi

      - name: Deploy application via S3
        run: |
          # Create deployment package
          tar -czf deploy.tar.gz backend frontend docker-compose.prod.yaml \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='node_modules' \
            --exclude='.git'

          # Upload to S3 (temporary)
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="aquacharge-deploy-${AWS_ACCOUNT_ID}-$(date +%s)"
          aws s3 mb s3://$BUCKET_NAME
          aws s3 cp deploy.tar.gz s3://$BUCKET_NAME/

          # Download and extract on EC2 via SSM
          aws ssm send-command \
            --instance-ids ${{ steps.get-instance.outputs.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cd /home/ec2-user/aquacharge","aws s3 cp s3://'"$BUCKET_NAME"'/deploy.tar.gz .","tar -xzf deploy.tar.gz","rm deploy.tar.gz","sudo docker-compose -f docker-compose.prod.yaml down","sudo docker-compose -f docker-compose.prod.yaml up -d --build"]' \
            --output text

          # Cleanup S3
          aws s3 rb s3://$BUCKET_NAME --force

      - name: Health check
        run: |
          sleep 15
          curl -f http://${{ steps.get-instance.outputs.INSTANCE_IP }}:5050/api/health || exit 1
          echo "✅ Deployment successful!"
